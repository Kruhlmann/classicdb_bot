/**
 * @fileoverview Classicdb helper function for building item descriptions.
 * @author Andreas Kruehlmann
 * @since 1.2.0
 */

import { Item } from "./item";
import { equipment_str } from "./parser";

/**
 * Formats damage values for an item.
 *
 * @param i - Item.
 * @returns - Formatted damage value or an empty string.
 */
function format_damage(i: Item): string {
    if (i.damage_range && i.swing_speed && i.dps) {
        // Damage in the discord tooltip will all be in a single line of
        // text, since it does not support DOM styling such as float: right
        // or tables. Instead a single line represents all the physical
        // damage stats. Added elemental damage can still occur in the list
        // of item stats.
        return `**${i.damage_range.low} - ${i.damage_range.high}**`
            + " damage every "
            + `**${i.swing_speed}** seconds (`
            + `**${i.dps}** damage per second)\n`;
    }
    return "";
}

/**
 * Formats equipment type for an item.
 *
 * @param i - Item.
 * @returns - Formatted equipment value or an empty string.
 */
function format_equipment(i: Item): string {
    // A more humanly readble tooltip is added here since the tooltip does
    // not support DOM styling such as float: right or tables. For instance
    // a "Sword" of equipment_type "Two-hand" becomes "Two-handed Sword".
    if (i.equipment_slot && i.equipment_type) {
        return `${equipment_str(i.equipment_slot, i.equipment_type)}\n`;
    }
    if (i.equipment_slot) {
        return `${i.equipment_slot}\n`;
    }
    return "";
}

/**
 * Formats primary stats for an item.
 *
 * @param i - Item.
 * @returns - Formatted stats value or an empty string.
 */
function format_stats(i: Item): string {
    // Various stats such as added damage, stamina and agility.
    if (!!i.primary_stats && i.primary_stats.length > 0) {
        return `${i.primary_stats.map((s) => {
            // Some items have added damage as a stat and since other damage
            // is already bold, damage stats should also be made bold here.
            return s = s.includes("Damage") ? `**${s}**` : s;
        }).join("\n")}\n`;
    }
    return "";
}

/**
 * Formats durability for an item.
 *
 * @param i - Item.
 * @returns - Formatted durability value or an empty string.
 */
function format_durability(i: Item): string {
    // Format durability as "Durability: durability / durability".
    if (i.durability) {
        return `Durability: ${i.durability} / ${i.durability}\n`;
    }
    return "";
}

/**
 * Formats class restrictions for an item.
 *
 * @param i - Item.
 * @returns - Formatted class restrictions value or an empty string.
 */
function format_class_restrictions(i: Item): string {
    if (i.class_restrictions && i.class_restrictions.length > 0) {
        return `Classes: ${i.class_restrictions.map((c) => {
            // Add an underline to the class links.
            return `__${c}__`;
        }).join(" ")}\n`;
    }
    return "";
}

/**
 * Formats level requirement for an item.
 *
 * @param i - Item.
 * @returns - Formatted level requirement value or an empty string.
 */
function format_level_requirement(i: Item): string {
    if (i.class_restrictions && i.class_restrictions.length > 0) {
        return `Requires level ${i.level_requirement}\n`;
    }
    return "";
}

/**
 * Formats effects for an item.
 *
 * @param i - Item.
 * @returns - Formatted effects value or an empty string.
 */
function format_effects(i: Item): string {
    // Large effect texts take up a lot of tooltip real estate, which
    // is solved by moving them to a seperate message. There should
    // however still be a short entry with the effect trigger and name
    // present in the description, which is generated by the effect
    // function `as_short_tooltip`.
    // Non-complex effects such as added hit % or spell power will not
    // need their own message and are kept in full.
    if (i.effects && i.effects.length > 0) {
        return `\n${i.effects.map((e) => `[${e.as_short_tooltip()}](${e.href})`).join("\n")}`;
    }
    return "";
}

 /**
  * Builds a discord markdown compatible string with correctly formatted
  * attributes in accordance with the standard tooltip layout. Should be used
  * for adding a description field to a discord RichEmbed message.
  *
  * @param i - Item to build description for.
  * @returns - Item tooltip.
  */
export function build_message_description(i: Item): string {
    const equipment_formatted = format_equipment(i);
    const dmg_formatted = format_damage(i);
    const stats_formatted = format_stats(i);
    const durability_formatted = format_durability(i);
    const class_restrictions = format_class_restrictions(i);
    const level_requirement_formatted = format_level_requirement(i);
    const effects_short_formatted = format_effects(i);

    return `${i.binds_on ? `${i.binds_on}\n` : ""}`
        + `${i.unique ? "Unique\n" :  ""}`
        + `${i.begins_quest ? `${i.begins_quest.to_md()}\n` : ""}`
        + `${equipment_formatted}`
        + `${dmg_formatted}`
        + `${i.armor ? `${i.armor} Armor\n` : ""}`
        + `${i.block ? `${i.block} Block\n` : ""}`
        + `${stats_formatted}`
        + `${durability_formatted}`
        + `${class_restrictions}`
        + `${level_requirement_formatted}`
        + `${effects_short_formatted}`.trim();
}
